{"version":3,"sources":["fileDataComponent.js","App.js","serviceWorker.js","index.js"],"names":["FileDataComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","verifyGST","onVerifyClick","state","data","showDataFromFile","map","v","i","react_default","a","createElement","type","value","name","onChange","handleChangeName","bind","assertThisInitialized","gst_no","handleChangeNumber","toConsumableArray","index","event","tmp","target","setState","className","onClick","Component","App","isValidPAN","str","length","strPart","substring","bool","RegExp","test","numberPart","parseInt","isNaN","charAt","match","isValidGST","toUpperCase","stateCode","pan","registrationNumber","showInvalidNumbers","arguments","undefined","invalidNumberList","validNumbers","forEach","company","hasOwnProperty","push","time","times","list","fileDataComponent","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81c6f65e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport data from './companyList.json';\n\nclass FileDataComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [...data]\n        };\n    }\n  \n    //handle changes in names of company and set it in state.\n    handleChangeName(index, event) {\n        let tmp = [...this.state.data];\n        tmp[index].name = event.target.value;\n        this.setState({\n            data: tmp\n        });\n    }\n\n    //handle changes in GST number of company and set it in state.\n    handleChangeNumber(index, event) {\n        let tmp = [...this.state.data];\n        tmp[index].gst_no = event.target.value;\n        this.setState({\n            data: tmp\n        });\n    }\n    \n    //button click, calling parent function\n    verifyGST = () => {\n        this.props.onVerifyClick(this.state.data);\n    }\n\n    //This function is to render file's data, and made it editable\n    showDataFromFile = () => {\n        return this.state.data.map((v, i) => <tr>\n            <td><input type=\"text\" value={v.name} onChange={this.handleChangeName.bind(this, i)} /></td>\n            <td><input type=\"text\" value={v.gst_no} onChange={this.handleChangeNumber.bind(this, i)} /></td>\n        </tr>);\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <table>\n          <thead>\n            <tr>\n            <th>Company Name</th>\n              <th>GST No.</th>\n              </tr>\n          </thead>\n          <tbody>\n            {this.showDataFromFile()}\n          </tbody>\n        </table>\n        <button onClick={this.verifyGST}>Verify</button>\n      </div>\n    );\n  }\n}\n\nexport default FileDataComponent;\n","import React, { Component } from 'react';\nimport './App.css';\nimport FileDataComponent from './fileDataComponent';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: []\n    };\n  }\n\n  // To verify PAN, if PAN is valid then it will return true else false.\n  isValidPAN = str => {\n      //checking length\n    if (str.length !== 10) {\n      return false;\n    }\n\n    //checking first 5 characters the String Part of PAN\n    let strPart = str.substring(0, 5);\n    let regex = new RegExp(/^[A-Z]{3}[CPHFATBLJG][A-Z]$/g);\n    let bool = regex.test(strPart);\n    if (!bool) {\n      return false;\n    }\n\n    //checking the serial number part of PAN\n    let numberPart = parseInt(str.substring(5, 9));\n    if (isNaN(numberPart) || numberPart < 1 || numberPart > 9999) {\n      return false;\n    }\n\n    //alphabetic check digit\n    let lastDigit = str.charAt(9);\n    bool = lastDigit.match(/[A-Z]/g);\n    if (!bool) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // To verify GST number. If number is valid then it will return true else false.\n  isValidGST = str => {\n    str = str.toUpperCase();\n\n    //checking length\n    if (str.length !== 15) {\n      return false;\n    }\n\n    //checking state code\n    let stateCode = parseInt(str.substring(0, 2));\n    if (isNaN(stateCode) || stateCode < 1 || stateCode > 37) {\n      return false;\n    }\n\n    //checking PAN validation\n    let pan = str.substring(2, 12);\n    if (!this.isValidPAN(pan)) {\n      return false;\n    }\n\n    //checking registration number\n    let registrationNumber = parseInt(str.charAt(12));\n    if (isNaN(registrationNumber)) {\n      return false;\n    }\n\n    //checking 14th digit whether Z or not.\n    let forteenthDigit = str.charAt(13);\n    if (forteenthDigit !== 'Z') {\n      return false;\n    }\n\n    //last digit check, valid only if it is an alphabet or a number\n    let lastDigit = str.charAt(14);\n    let bool = lastDigit.match(/[A-Z]|[0-9]/g);\n    if (!bool) {\n      return false;\n    }\n\n    return true;\n  }\n\n  showInvalidNumbers = (data = []) => {\n    let invalidNumberList = [];\n    let validNumbers = {};\n\n    //Iterating all companies for GST verification\n    data.forEach(company => {\n      if (this.isValidGST(company.gst_no)) {\n        //Checking for repeatation of same valid GST no.\n        if (validNumbers.hasOwnProperty(company.gst_no)) {\n          invalidNumberList.push(company);\n          if (!validNumbers[company.gst_no].time) {\n            validNumbers[company.gst_no] = {\n              name: validNumbers[company.gst_no],\n              times: 1\n            }\n            invalidNumberList.push({\n              name: validNumbers[company.gst_no].name,\n              gst_no: company.gst_no\n            });\n          } else {\n            validNumbers[company.gst_no].times++;\n          }\n        } else {\n          validNumbers[company.gst_no] = company.name;\n        }\n      } else {\n        // Push invalid GST into an array\n        invalidNumberList.push(company);\n      }\n    });\n    // storing all invalid GST no. into list variable.\n    let list = invalidNumberList.map(company => <tr><td>{company.name}</td><td>{company.gst_no}</td></tr>);\n\n    //setting state with new list to render it on DOM\n    this.setState({ list });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <FileDataComponent onVerifyClick={this.showInvalidNumbers} />\n        <table>\n          <thead>\n            <tr>\n            <th>Company Name</th>\n              <th>GST No.</th>\n              </tr>\n          </thead>\n          <tbody>\n            {this.state.list}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}